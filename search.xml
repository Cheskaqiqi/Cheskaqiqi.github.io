<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GSoC Git Final Report</title>
      <link href="/2023/08/22/Final/"/>
      <url>/2023/08/22/Final/</url>
      
        <content type="html"><![CDATA[<h1 id="GSoC-Git-Final-Report"><a href="#GSoC-Git-Final-Report" class="headerlink" title="GSoC: Git Final Report"></a>GSoC: Git Final Report</h1><h1 id="Previous-blogs"><a href="#Previous-blogs" class="headerlink" title="Previous blogs:"></a>Previous blogs:</h1><p><a href="">Week1-2</a></p><p><a href="">Week3-4</a></p><p><a href="">Week5-6</a></p><p><a href="">Week7-8</a></p><p><a href="">Week9-10</a></p><p><a href="">Week11-12</a></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>During my GSoC project, I was trying to integrate a series of commands with sparse index. There are three commands that I’ve been working on: git diff-files, git write-tree,  git diff-tree， git worktree and git check-attr. I’ll explain what the situation was, what I’ve done, and what is the result for each command.</p><h1 id="git-diff-files"><a href="#git-diff-files" class="headerlink" title="git diff-files:"></a>git diff-files:</h1><p><a href="https://lore.kernel.org/git/20230509194241.469477-2-cheskaqiqi@gmail.com/">Mailing List</a></p><h1 id="Situation"><a href="#Situation" class="headerlink" title="Situation:"></a>Situation:</h1><p>git diff-files was relatively compatible with sparse-checkout when I saw it. So the integration with sparse index was started without much hindrance.</p><h1 id="What-I’ve-done"><a href="#What-I’ve-done" class="headerlink" title="What I’ve done:"></a>What I’ve done:</h1><p>Before integrating the ‘git diff-files’ builtin with the sparse index<br>feature, add tests to t1092-sparse-checkout-compatibility.sh to ensure<br>it currently works with sparse-checkout and will still work with sparse<br>index after that integration.</p><p>Remove full index requirement for <code>git diff-files</code>. Refactor the<br>ensure_expanded and ensure_not_expanded functions by introducing a<br>common helper function, ensure_index_state. Add test to ensure the index<br>is no expanded in <code>git diff-files</code>.</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h1><p>The <code>p2000</code> tests demonstrate a ~96% execution time reduction for ‘git<br>diff-files’ and a ~97% execution time reduction for ‘git diff-files’<br>for a file using a sparse index.</p><h1 id="git-write-tree"><a href="#git-write-tree" class="headerlink" title="git write-tree:"></a>git write-tree:</h1><p><a href="https://lore.kernel.org/git/20230402000117.313171-1-cheskaqiqi@gmail.com/T/#m600dd6f757f3bae990c8a355021a092d0ece9a47">Mailing List</a></p><h1 id="Situation-1"><a href="#Situation-1" class="headerlink" title="Situation:"></a>Situation:</h1><p>The recursive algorithm for update_one() was already updated in 2de37c5<br>(cache-tree: integrate with sparse directory entries, 2021-03-03) to<br>handle sparse directory entries in the index.</p><h1 id="What-I’ve-done-1"><a href="#What-I’ve-done-1" class="headerlink" title="What I’ve done:"></a>What I’ve done:</h1><p> Set the requires-full-index to false for “write-tree”.</p><h1 id="Result-1"><a href="#Result-1" class="headerlink" title="Result:"></a>Result:</h1><p>The <code>p2000</code> tests demonstrate a ~96% execution time reduction for ‘git<br>write-tree’ using a sparse index.</p><h1 id="git-diff-tree"><a href="#git-diff-tree" class="headerlink" title="git diff-tree:"></a>git diff-tree:</h1><p><a href="https://lore.kernel.org/git/20230518154454.475487-1-cheskaqiqi@gmail.com/">Mailing List</a></p><h1 id="Situation-2"><a href="#Situation-2" class="headerlink" title="Situation:"></a>Situation:</h1><p>The index is read in ‘cmd_diff_tree’ at two points:</p><ol><li><p>The first index read was added in fd66bcc31ff (diff-tree: read the<br>index so attribute checks work in bare repositories, 2017-12-06) to deal<br>with reading ‘.gitattributes’ content. 77efbb366ab (attr: be careful<br>about sparse directories, 2021-09-08) established that, in a sparse<br>index, we do <em>not</em> try to load a ‘.gitattributes’ file from within a<br>sparse directory.</p></li><li><p>The second index access point is involved in rename detection,<br>specifically when reading from stdin.This was initially added in<br>f0c6b2a2fd9 ([PATCH] Optimize diff-tree -[CM]–stdin, 2005-05-27), where<br>‘setup’ was set to ‘DIFF_SETUP_USE_SIZE_CACHE |DIFF_SETUP_USE_CACHE’.<br>That assignment was later modified to drop the’DIFF_SETUP_USE_CACHE’ in<br>ff7fe37b053 (diff.c: move read_index() code back to the caller,<br>2018-08-13).However, ‘DIFF_SETUP_USE_SIZE_CACHE’ seems to be unused as<br>of 6e0b8ed6d35 (diff.c: do not use a separate “size cache”., 2007-05-07)<br>and nothing about ‘detect_rename’ otherwise indicates index usage.</p></li></ol><h1 id="What-I’ve-done-2"><a href="#What-I’ve-done-2" class="headerlink" title="What I’ve done:"></a>What I’ve done:</h1><p>Set the requires-full-index to false for “diff-tree”. Add test to ensure index won’t expand regardless of ‘diff-tree’ a file inside or outside the cone.</p><h1 id="Result-2"><a href="#Result-2" class="headerlink" title="Result:"></a>Result:</h1><p>The <code>p2000</code> tests demonstrate a ~98% execution time reduction for<br>‘git diff-tree’ using a sparse index.</p><h1 id="git-worktree"><a href="#git-worktree" class="headerlink" title="git worktree:"></a>git worktree:</h1><h1 id="Mailing-ListSituation"><a href="#Mailing-ListSituation" class="headerlink" title="Mailing ListSituation:"></a><a href="https://lore.kernel.org/git/20230606172633.669916-1-cheskaqiqi@gmail.com/#t">Mailing List</a><br>Situation:</h1><p>The index is read in ‘worktree.c’ at two points:</p><p>1.The ‘validate_no_submodules’ function, which checks if there are any<br>submodules present in the worktree.</p><p>2.The ‘check_clean_worktree’ function, which verifies if a worktree is<br>‘clean’, i.e., there are no untracked or modified but uncommitted files.<br>This is done by running the ‘git status’ command, and an error message<br>is thrown if the worktree is not clean. Given that ‘git status’ is<br>already sparse-aware, the function is also sparse-aware.</p><h1 id="What-I’ve-done-3"><a href="#What-I’ve-done-3" class="headerlink" title="What I’ve done:"></a>What I’ve done:</h1><p>Set the requires-full-index to false for<br>“git worktree”. Add tests that verify that ‘git worktree’ behaves correctly when the<br>sparse index is enabled and test to ensure the index is not expanded.</p><h1 id="Result-3"><a href="#Result-3" class="headerlink" title="Result:"></a>Result:</h1><p>The <code>p2000</code> tests demonstrate a ~20% execution time reduction for<br>‘git worktree’ using a sparse index.<br>(Note:the p2000 test results didn’t reflect the huge speedup because of<br>the index reading time is minuscule comparing to the filesystem<br>operations.)</p><h1 id="git-check-attr"><a href="#git-check-attr" class="headerlink" title="git check-attr:"></a>git check-attr:</h1><p><a href="https://lore.kernel.org/git/20230811142211.4547-1-cheskaqiqi@gmail.com/">Mailing List</a></p><h1 id="Situation-3"><a href="#Situation-3" class="headerlink" title="Situation:"></a>Situation:</h1><p>Before this patch, git check-attr was unable to read the attributes from<br>a .gitattributes file within a sparse directory. The original comment<br>was operating under the assumption that users are only interested in<br>files or directories inside the cones. Therefore, in the original code,<br>in the case of a cone-mode sparse-checkout, we didn’t load the<br>.gitattributes file.<br>However, this behavior can lead to missing attributes for files inside<br>sparse directories, causing inconsistencies in file handling.</p><h1 id="What-I’ve-done-4"><a href="#What-I’ve-done-4" class="headerlink" title="What I’ve done:"></a>What I’ve done:</h1><p>Add tests for <code>git check-attr</code>, make sure attribute file does get read<br>from index when path is either inside or outside of sparse-checkout<br>definition.</p><p>Add a test named ‘diff –check with pathspec outside sparse definition’.<br>Ensuring the correct application of the attribute rules even when the<br>file’s path is outside the sparse-checkout definition.</p><p>Revise ‘git check-attr’ to allow attribute reading for<br>files in sparse directories from the corresponding .gitattributes files:</p><p>1.Utilize path_in_cone_mode_sparse_checkout() and index_name_pos_sparse<br>to check if a path falls within a sparse directory.</p><p>2.If path is inside a sparse directory, employ the value of<br>index_name_pos_sparse() to find the sparse directory containing path and<br>path relative to sparse directory. Proceed to read attributes from the<br>tree OID of the sparse directory using read_attr_from_blob().</p><p>3.If path is not inside a sparse directory，ensure that attributes are<br>fetched from the index blob with read_blob_data_from_index().</p><p>After testing, I turned off the command_requires_full_index , marking this command as compatible with sparse index.</p><h1 id="Result-4"><a href="#Result-4" class="headerlink" title="Result:"></a>Result:</h1><p>The <code>p2000</code> tests demonstrate a ~63% execution time reduction for<br>‘git check-attr’ using a sparse index.</p><h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words:"></a>Final Words:</h1><p>I had a great and very productive time working on this project. Thanks to this project, I have learnt many things about git, C and Bash !</p><p>In the community, I learned that it’s very important to explain my code and ideas clearly. Talking and sharing thoughts with other developers can help find new ideas, better solutions, or mistakes I didn’t see before. I also learned that when I get stuck or can’t think of something new, it’s good to ask for help. Maybe talking to a mentor or someone in the community can give me a new point of view. I also got better at using debugging tools to understand code and find mistakes.</p><p>Thank you, my mentors, Victoria. All these things, would not been completed if constant guidance from my mentors wasn’t there.</p><p>Finally, I would like to thank this amazing community.Thanks for being patient with me and clarifying my doubts.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week11-12</title>
      <link href="/2023/08/21/Week11-12/"/>
      <url>/2023/08/21/Week11-12/</url>
      
        <content type="html"><![CDATA[<h1 id="week11-12"><a href="#week11-12" class="headerlink" title="week11-12"></a>week11-12</h1><p>For the ‘git diff –check’ test, my mentor highlighted some mistakes and areas for improvement:</p><p>The ‘git config’ in its current form doesn’t apply the configuration to any of the test repositories; instead, it applies the config to the parent directory. To apply the config to the test repositories, the correct command should be:</p><pre><code>test_all_match git config core.whitespace -trailing-space,-space-before-tab </code></pre><p>Add ‘folder1/a’ to the index then “re-sparsifying” ‘folder1/‘ with ‘git sparse-checkout reapply’.</p><p>Use the ‘–cached’ option to ‘git diff’ to compare “index vs. HEAD” rather than “working tree vs. index”.</p><p>However,  with these modifications to the test, it failed for the ‘sparse-index’ case. My mentor believes that the reason for the test failure isn’t an issue with my test setup. It doesn’t seem to be a problem stemming from my patch, but rather a bug in ‘diff’. This bug can be replicated with the following test, which uses the infrastructure in t1092:</p><pre><code>test_expect_failure 'diff --cached shows differences in sparse directory' '       init_repos &amp;&amp;       test_all_match git reset --soft update-folder1 &amp;&amp;    test_all_match git diff --cached -- folder1/a'</code></pre><p>The issue is in ‘oneway_diff()’. The pathspec of ‘folder1/a’ doesn’t match ‘folder1/‘ according to ‘ce_path_match()’, so ‘do_oneway_diff()’ isn’t called on ‘folder1/‘ like it should be. Specifically, in the sparse index mode, ‘folder1/‘ can’t be expanded, leading to ‘folder1/a’ not being properly recognized. I’m considering your suggestion to utilize ‘pathspec_needs_expanded_index()’. If the path doesn’t need to expand the index, I’ll just stick to what ‘ce_path_match’ originally did (return match_pathspec(istate, pathspec, ce-&gt;name, ce_namelen(ce), 0, seen, S_ISDIR(ce-&gt;ce_mode) || S_ISGITLINK(ce-&gt;ce_mode)). But if the path does need to expand the index, I plan to find the corresponding tree for the path, using ‘tree_entry_interesting()’ to check if my path exists within the tree. Finding the tree corresponding to the pathspec is a tricky issue, and my current idea is to use the ‘git_fnmatch()’ function. I plan to start from the root directory, traversing each tree, recursively exploring the top-level tree, and looking for all trees matching a specific pattern. But I’m concerned it might really slow things down. </p><p>After discussing with Victoria, she believes that it’s not feasible to find the trees corresponding to the pathspec without incurring a significant tree traversal cost. She proposed a potential solution for me to try: || (pathspec_needs_expanded_index(…) &amp;&amp; S_ISSPARSEDIR(tree)). Unfortunately, this approach still couldn’t successfully address the issue. As a result, I’ve temporarily marked this problem as NEEDWORK and submitted the ‘check-attr’ patch. I hope to explore new methods to rectify this issue in the coming period.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week9-10</title>
      <link href="/2023/08/20/Week9-10/"/>
      <url>/2023/08/20/Week9-10/</url>
      
        <content type="html"><![CDATA[<h1 id="week9-10"><a href="#week9-10" class="headerlink" title="week9-10"></a>week9-10</h1><p>For the past two weeks, I’ve been refining my code based on feedback .One of the additions I’ve made is: *add smudge/clean filters in the test ‘merge with conflict outside cone’. This is because the changes in the attr.c portion from the last patch can affect the behavior of sparse index-integrated commands that read attributes, such as ‘git merge’. To comprehensively verify whether the attributes can be successfully read, we also need to add some tests that concern the commands related to this code to ensure the modified code can now properly read attributes. One approach is to take the ‘t1092’ test ‘merge with conflict outside cone’, include smudge/clean filters in the .gitattributes files located within the affected sparse directories.</p><p>The clean/smudge filter is quite simple to use. Create a filter driver with two commands—clean&nbsp;and&nbsp;smudge—and then apply the filter per record in the&nbsp;.gitattributes&nbsp;file.</p><pre><code>echo "a filter=rot13" &gt;&gt;.gitattributes &amp;&amp;run_on_sparse mkdir folder1 &amp;&amp;run_on_all cp ../.gitattributes ./folder1 &amp;&amp;git -C full-checkout add folder1/.gitattributes &amp;&amp;run_on_sparse git add --sparse folder1/.gitattributes &amp;&amp;run_on_all git commit -m "add .gitattributes" &amp;&amp;test_sparse_match git sparse-checkout reapply &amp;&amp;git config filter.rot13.clean "tr 'A-Za-z' 'N-ZA-Mn-za-m'" &amp;&amp;git config filter.rot13.smudge "tr 'A-Za-z' 'N-ZA-Mn-za-m'" &amp;&amp;</code></pre><p>In a nutshell, this code sets up and tests a ROT13 filter in a Git repo and applies it to files named a.</p><p>The test passed successfully, but in the feedback, my mentor asked me to demonstrate that the ‘merge with conflict outside cone’ test could not pass before the changes to attr.c, but could successfully pass after. To my surprise, I found that after making modifications to ‘merge with conflict outside cone’, the test passed regardless of whether the attr.c code was altered or not. This indicates that the clean and smudge filters weren’t applied effectively. After multiple unsuccessful attempts to rectify this, I decided to focus on other functions that call ‘git_check_attr()’, such as ‘whitespace_rule()’.</p><p>Add a test ‘diff –check with pathspec outside sparse definition’.<br>It starts by disabling the trailing whitespace and space-before-tab<br>checks using the core.whitespace configuration option. Then, it<br>specifically re-enables the trailing whitespace check for a file located<br>in a sparse directory. This is accomplished by adding a<br>whitespace=trailing-space rule to the .gitattributes file within that<br>directory. To ensure that only the .gitattributes file in the index is<br>being read, and not any .gitattributes files in the working tree, the<br>test removes the .gitattributes file from the working tree after adding<br>it to the index. The final part of the test uses ‘git diff –check’ to<br>verify the correct application of the attribute rules. This ensures that<br>the .gitattributes file is correctly read from index and applied, even<br>when the file’s path falls outside of the sparse-checkout definition.</p><p>The newly added test effectively showcases the difference in outcomes before and after modifying the read_attr_from_index() function – transitioning from a failed test to a successful one. Following this, I reorganized the order of the patches to provide a clearer narrative of the issue and its resolution.<br>t1092: add tests for git check-attr<br>attr.c: enable reading attributes in a sparse directory<br>check-attr: integrate with sparse-index<br>By restructuring the patches in this manner, we introduce a failing test case in patch 1, which then reverts back to “test_expect_success” by the time we reach patch 2. This strategy is specifically devised to highlight the necessity of reading attributes from a sparse directory. Without this capability, the sparse index doesn’t function correctly in the context of git check-attr.”</p><p><a href="https://lore.kernel.org/git/20230711133035.16916-1-cheskaqiqi@gmail.com/T/#me8720ef3fb1ca1d5256c89a8f5a44f1a3e39059b">patch V4 Link</a></p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week7-8</title>
      <link href="/2023/07/06/Week7-8/"/>
      <url>/2023/07/06/Week7-8/</url>
      
        <content type="html"><![CDATA[<h1 id="week7-8"><a href="#week7-8" class="headerlink" title="week7-8"></a>week7-8</h1><p>This week, as I was examining the part involving “S_ISSPARSEDIR(ce-&gt;ce_mode)” in “builtin/grep.c: integrate with sparse index”, I realized that the rationale behind using “init_tree_desc(&amp;tree, data, size)” is to ensure that the “tree_entry” in “grep_tree” can iterate through all entries in a tree.</p><p>Fortuitously, there is a method in the source code - “read_attr_from_blob” - which successfully retrieves an entry for a given path from the specified tree object using the “get_tree_entry” function.</p><p>If the path is not a sparse directory, it simply reads the BLOB using “repo_read_object_file”.</p><p>I’ve also updated the original tests to now include:</p><p>1.Manually adding an untracked .gitattributes file to a sparse directory, then using ‘check-attr’ on a file in that directory.<br>2.Adding a ‘.gitattributes’ file inside a sparse directory, committing it, then running ‘git sparse-checkout reapply’, and finally using ‘check-attr’ on a file in that directory.</p><p>Here’s the patch link:<br><a href="https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927">https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927</a></p><p>Following my mentor’s advice, I’ve made some modifications. I want to elaborate on the most crucial part of these modifications, which concerns ‘read’.</p><pre><code>if (*path is inside sparse directory*)    stack = read_attr_from_blob(istate,                     *sparse directory containing path*,                     *path relative to sparse directory*,                     flags);else    stack = *read .gitattributes from index blob*"path is inside sparse directory" can be determined using a combination of 'path_in_cone_mode_sparse_checkout()' &amp; 'index_name_pos_sparse()'. An  example of similar logic can be found in 'entry_is_new_sparse_dir()' in  'unpack-trees.c'. "sparse directory containing path" and "path relative to sparse directory"  can be determined from the results of 'index_name_pos_sparse()'.</code></pre><p>The ‘entry is_new sparse dir’ function is used to determine whether a given path should be unpacked as a new sparse directory in the sparse index. This function first checks whether the given path is a directory, and then checks if it is within the range of sparse checkout. Then, the function determines the location of this path in the index and checks whether it already exists in the index or whether there are any child entries in the index.<br>In this function, index_name_pos_sparse is used to find the position of dirpath in the index. The return value from this function can be one of two cases:</p><p>If the return value is &gt;= 0, this means dirpath already exists in the index.<br>If the return value is &lt; 0, this means dirpath does not exist in the index. However, the negative of this return value can be used to determine the position where dirpath should be inserted in the index. Specifically, if the return value is pos, then dirpath should be inserted at position -pos - 1 in the index.<br>So in this function, -pos - 1 is used to indicate the position where dirpath should be inserted in the index.<br>Based on the analysis above, it brings us back to the code that needs a bit of tweaking: ‘read_attr_from_index’：After calling index_name_pos_sparse, a negative position is returned if the path is not found in the index. We negate and subtract 2 to get the position of the closest directory entry that is less than the provided path. The “minus two” gives us the position of the entry preceding the file’s path in the index.<br>This is important because if the path is contained within a sparse directory, the preceding entry will be that directory.<br>You can check out the remaining code changes at the link below:<br><a href="https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927">https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927</a></p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week5-6</title>
      <link href="/2023/06/25/Week5-6/"/>
      <url>/2023/06/25/Week5-6/</url>
      
        <content type="html"><![CDATA[<h1 id="week5-6"><a href="#week5-6" class="headerlink" title="week5-6"></a>week5-6</h1><p>This week, I started to delve into the source code of git check-attr with the goal of creating an effective test. git_check_attr operates by iterating over all attributes listed in the attr_check structure. It checks the values of these attributes for a specific file and subsequently stores the results back into the attr_check structure. This mechanism enables simultaneous querying of multiple attributes, eliminating the need for repeated function calls. After examining the source code, I crafted my first test which, to my delight, passed in its entirety. This led me to believe that this command had been successfully integrated with the sparse command at some point. However, this assumption was later proven incorrect.</p><pre><code>test_expect_success 'check-attr with pathspec inside sparse definition' '    init_repos &amp;&amp;    echo "a -crlf myAttr" &gt;&gt;.gitattributes &amp;&amp;    run_on_all cp ../.gitattributes . &amp;&amp;     git check-attr -a -- deep/a &amp;&amp;    test_all_match git add deep/.gitattributes &amp;&amp;    test_all_match git check-attr -a --cached -- deep/a'test_expect_success 'check-attr with pathspec inside sparse definition' '    init_repos &amp;&amp;     "a -crlf myAttr" &gt;&gt;.gitattributes &amp;&amp;    run_on_all cp ../.gitattributes . &amp;&amp;    test_all_match git check-attr -a -- folder1/a &amp;&amp;    test_all_match git add folder1/.gitattributes &amp;&amp;    test_all_match git check-attr -a --cached -- folder1/a'</code></pre><p>In the context of the read_attr function, when direction is set to GIT_ATTR_INDEX, the attributes are fetched from the index. If the direction is GIT_ATTR_CHECKOUT, an attempt is made to read the attributes from the index first, and if unsuccessful, the function tries to retrieve them from the file. Similarly, if the direction is GIT_ATTR_CHECKIN, the attributes are initially attempted to be read from the file, and if this fails, the function tries to fetch them from the index.</p><p>The process of extracting attributes from the index is carried out by the read_attr_from_index function. It utilizes the path_in_cone_mode_sparse_checkout function to verify if the specified path falls within the sparse checkout scope. If it doesn’t, the function returns NULL. This sheds light on why the aforementioned test was successful; instead of searching for attributes in the index, we were traversing the working tree for the ‘.gitattributes’ file in all instances of this test.</p><p>My mentor, Victoria, identified a limitation in this code. She explained that if someone need to read the attributes of a file located within a sparse directory, it’s necessary to read attributes from any ‘.gitattributes’ files that might be present in that sparse directory. She suggested that I should read the blob OIDs from the tree entry of the sparse directory, citing the example of “builtin/grep.c: integrate with sparse index”.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week3-4</title>
      <link href="/2023/06/19/Week3-4/"/>
      <url>/2023/06/19/Week3-4/</url>
      
        <content type="html"><![CDATA[<h1 id="week3-4"><a href="#week3-4" class="headerlink" title="week3-4"></a>week3-4</h1><p>When I started studying git worktree, I went through a period of mental confusion. At first, I started studying the documentation to get familiar with the command, which differs significantly from other commands: it manages multiple working trees attached to the same repository. I spent a lot of time understanding this concept, and it was only after trying to use the command that I understood how it should be used. However, I was still puzzled by this concept. I wondered how it was related to the index, since it creates a new working tree each time. When I was confused, I thought I should seriously study the source code and look for places where it interacts with the index.</p><p>I eventually found two places related to the index:</p><ol><li><p>The ‘validate_no_submodules’ function, which checks if there are any submodules present in the worktree.</p></li><li><p>The ‘check_clean_worktree’ function, which verifies if a worktree is ‘clean’, i.e., there are no untracked or modified but uncommitted files. This is done by running the ‘git status’ command, and an error message is thrown if the worktree is not clean. Given that ‘git status’ is already sparse-aware, the function is also sparse-aware.</p></li></ol><p>So the next steps were quite similar to those with diff-tree, as we had evidence to show that we didn’t need to do any extra handling of the index. Finally, we didn’t see a significant improvement in performance testing, mainly because the time taken to read the index is minuscule compared to filesystem operations.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week1-2</title>
      <link href="/2023/06/19/Week1-2/"/>
      <url>/2023/06/19/Week1-2/</url>
      
        <content type="html"><![CDATA[<h1 id="week1-2"><a href="#week1-2" class="headerlink" title="week1-2"></a>week1-2</h1><p>During the first week, I mainly dove into the documentation of git diff-tree, and also skimmed through the source code to help me write better tests. Diff-tree primarily has two commands related to the index: one is “Compares the content and mode of the blobs found via two tree objects”, and the other one compares commit objects. Therefore, I wrote tests around these two aspects. Super luckily, when I set the “requires-full-index” to false for “diff-tree”, all the tests passed. This indirectly proves that “diff-tree” might have successfully implemented sparse indexing. </p><p>But that’s not enough. We need to be certain that this sparse index integration is correct. We should verify that the intended usage associated with those two reads will still work with a sparse index.</p><p>So, I started digging into the source code, trying to find proof of lower-level functions already being sparse-aware, but I couldn’t find any. Thanks to the help of my mentor, who clarified a lot of concepts for me after I posted my first RFC patch, I came to understand the reasons for the successful integration:</p><ol><li><p>The first index read was added in fd66bcc31ff (diff-tree: read the index so attribute checks work in bare repositories, 2017-12-06) to deal with reading ‘.gitattributes’ content. 77efbb366ab (attr: be careful about sparse directories, 2021-09-08) established that, in a sparse index, we do <em>not</em> try to load a ‘.gitattributes’ file from within a sparse directory. </p></li><li><p>The second index access point is involved in rename detection, specifically when reading from stdin. This was initially added in f0c6b2a2fd9 ([PATCH] Optimize diff-tree -[CM]–stdin, 2005-05-27), where ‘setup’ was set to ‘DIFF_SETUP_USE_SIZE_CACHE |DIFF_SETUP_USE_CACHE’. That assignment was later modified to drop the ‘DIFF_SETUP_USE_CACHE’ in ff7fe37b053 (diff.c: move read_index() code back to the caller, 2018-08-13). However, ‘DIFF_SETUP_USE_SIZE_CACHE’ seems to be unused as of 6e0b8ed6d35 (diff.c: do not use a separate “size cache”., 2007-05-07) and nothing about ‘detect_rename’ otherwise indicates index usage.</p></li></ol><p>Therefore, we ensured that the integration is comprehensive and correct. Finally, in performance tests, everything was as expected, achieving a ~98% reduction in execution time.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATHEMATICAL INDUCTION</title>
      <link href="/2022/09/17/New%20Document/"/>
      <url>/2022/09/17/New%20Document/</url>
      
        <content type="html"><![CDATA[<p>#How Does Induction Work</p><p>T is a theorem with a parameter n ≥ 1.</p><p>• If we show that:</p><ol><li>T holds for n = 1 (or a small number d, if n ≥ d)</li><li>For every n ≥ 1</li></ol><p>If T holds for n<br>then T holds for n + 1</p><p>• Then theorem T holds for all n ≥ 1. The assumption that T holds for n is called induction hypothesis</p><p>#Strong Induction</p><p>A statement T with a parameter n is true for n = 1 and<br>if, for every n ≥ 1 the following holds:</p><p>T being true for every natural number m ≤ n implies that T is true for n + 1, then T is true for all natural numbers</p><p>Also, power(2) induction: induction on natural numbers that are integer powers of 2 Multiple induction: base case for one parameter required another induction on another parameter.</p>]]></content>
      
      
      <categories>
          
          <category> ANALYSIS OF ALGORITHMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BINARY SEARCH AND VARIATIONS</title>
      <link href="/2022/02/11/red-black-tree/"/>
      <url>/2022/02/11/red-black-tree/</url>
      
        <content type="html"><![CDATA[<p>#Binary Search and Variations</p><ul><li>Idea: cut search space in half (about half) by asking only one question.</li><li>Also work when, with constant time, cut search space from n to n<br>a, where a &gt; 1.</li><li>Used often in computer science.</li><li>Pure binary search</li></ul><p>x1, x2, . . . , xn is a sequence of real numbers such that<br>x1 ≤ x2 ≤ · · · ≤ xn<br>Problem: Given a real number z, we want to find whether z appears in the sequence, and<br>if it does, to find an index i such that xi = z.<br>Solution: binary search!</p><p>Binary search:<br>Question: “Is xn/2 &lt; z?”<br>Yes: binary search range becomes xn/2+1, . . . xn<br>No: binary search range becomes x1, . . . , xn/2<br>Complexity: O(log2 n).</p><p>#A More General Version<br>Input: a sorted sequence, x1 ≤ x2 ≤ . . . ≤ xn, and a target value z<br>Output: the largest index i, s.t. xi ≤ z, if there is no such i then return 0;</p><ol><li>If x1 &gt; z, return 0;</li><li>If xn ≤ z, return n;</li><li>l = 1; r = n; (xl ≤ z &lt; xr)</li><li>if l = r − 1 return l;</li><li>Set m to b<br>l+r/2，the greatest integer less than or equal to l+r/2<br>which is the middle between l and r</li><li>if xm &gt; z, then r = m; goto step 4;</li><li>if xm ≤ z, then l = m; goto step 4;</li></ol><p>#Binary Search in a Cyclic Sequence<br>Definition. A sequence x1, x2, . . . , xn is said to be cyclically sorted if the smallest<br>number in the sequence is xi<br>for some unknown i, and the sequence<br>xi<br>, xi+1, . . . , xn, x1, x2, . . . , xi−1<br>is sorted.<br>The Problem: Given a cyclically sorted list, find the position of the minimum element in<br>the list (we assume elements are distinct).</p><p>Solution: For any two numbers xk, xm, such that k &lt; m, compare xk with xm.</p><ol><li>If xk &lt; xm then i cannot be in the range k &lt; j ≤ m (k is possible)</li><li>If xk &gt; xm then i must be in the range k &lt; j ≤ m</li></ol><p>Is xn/2 &lt; xn?<br>Yes: search range 1 . . . n/2. No: search range n/2 + 1, . . . n.<br>Find the index of the smallest element in O(logn) time</p>]]></content>
      
      
      <categories>
          
          <category> ANALYSIS OF ALGORITHMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
