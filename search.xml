<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GSoC week7-8</title>
      <link href="/2023/07/05/Week7-8/"/>
      <url>/2023/07/05/Week7-8/</url>
      
        <content type="html"><![CDATA[<h1 id="week7-8"><a href="#week7-8" class="headerlink" title="week7-8"></a>week7-8</h1><p>This week, as I was examining the part involving “S_ISSPARSEDIR(ce-&gt;ce_mode)” in “builtin/grep.c: integrate with sparse index”, I realized that the rationale behind using “init_tree_desc(&amp;tree, data, size)” is to ensure that the “tree_entry” in “grep_tree” can iterate through all entries in a tree.</p><p>Fortuitously, there is a method in the source code - “read_attr_from_blob” - which successfully retrieves an entry for a given path from the specified tree object using the “get_tree_entry” function.</p><p>If the path is not a sparse directory, it simply reads the BLOB using “repo_read_object_file”.</p><p>I’ve also updated the original tests to now include:</p><p>1.Manually adding an untracked .gitattributes file to a sparse directory, then using ‘check-attr’ on a file in that directory.<br>2.Adding a ‘.gitattributes’ file inside a sparse directory, committing it, then running ‘git sparse-checkout reapply’, and finally using ‘check-attr’ on a file in that directory.</p><p>Here’s the patch link:<br><a href="https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927">https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927</a></p><p>Following my mentor’s advice, I’ve made some modifications. I want to elaborate on the most crucial part of these modifications, which concerns ‘read’.</p><pre><code>if (*path is inside sparse directory*)    stack = read_attr_from_blob(istate,                     *sparse directory containing path*,                     *path relative to sparse directory*,                     flags);else    stack = *read .gitattributes from index blob*"path is inside sparse directory" can be determined using a combination of 'path_in_cone_mode_sparse_checkout()' &amp; 'index_name_pos_sparse()'. An  example of similar logic can be found in 'entry_is_new_sparse_dir()' in  'unpack-trees.c'. "sparse directory containing path" and "path relative to sparse directory"  can be determined from the results of 'index_name_pos_sparse()'.</code></pre><p>The ‘entry is_new sparse dir’ function is used to determine whether a given path should be unpacked as a new sparse directory in the sparse index. This function first checks whether the given path is a directory, and then checks if it is within the range of sparse checkout. Then, the function determines the location of this path in the index and checks whether it already exists in the index or whether there are any child entries in the index.<br>In this function, index_name_pos_sparse is used to find the position of dirpath in the index. The return value from this function can be one of two cases:</p><p>If the return value is &gt;= 0, this means dirpath already exists in the index.<br>If the return value is &lt; 0, this means dirpath does not exist in the index. However, the negative of this return value can be used to determine the position where dirpath should be inserted in the index. Specifically, if the return value is pos, then dirpath should be inserted at position -pos - 1 in the index.<br>So in this function, -pos - 1 is used to indicate the position where dirpath should be inserted in the index.<br>Based on the analysis above, it brings us back to the code that needs a bit of tweaking: ‘read_attr_from_index’：After calling index_name_pos_sparse, a negative position is returned if the path is not found in the index. We negate and subtract 2 to get the position of the closest directory entry that is less than the provided path. The “minus two” gives us the position of the entry preceding the file’s path in the index.<br>This is important because if the path is contained within a sparse directory, the preceding entry will be that directory.<br>You can check out the remaining code changes at the link below:<br><a href="https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927">https://lore.kernel.org/git/20230701064843.147496-1-cheskaqiqi@gmail.com/T/#ma891212eb58419d8e73f061fd44a659941e42927</a></p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week5-6</title>
      <link href="/2023/06/25/Week5-6/"/>
      <url>/2023/06/25/Week5-6/</url>
      
        <content type="html"><![CDATA[<h1 id="week5-6"><a href="#week5-6" class="headerlink" title="week5-6"></a>week5-6</h1><p>This week, I started to delve into the source code of git check-attr with the goal of creating an effective test. git_check_attr operates by iterating over all attributes listed in the attr_check structure. It checks the values of these attributes for a specific file and subsequently stores the results back into the attr_check structure. This mechanism enables simultaneous querying of multiple attributes, eliminating the need for repeated function calls. After examining the source code, I crafted my first test which, to my delight, passed in its entirety. This led me to believe that this command had been successfully integrated with the sparse command at some point. However, this assumption was later proven incorrect.</p><pre><code>test_expect_success 'check-attr with pathspec inside sparse definition' '    init_repos &amp;&amp;    echo "a -crlf myAttr" &gt;&gt;.gitattributes &amp;&amp;    run_on_all cp ../.gitattributes . &amp;&amp;     git check-attr -a -- deep/a &amp;&amp;    test_all_match git add deep/.gitattributes &amp;&amp;    test_all_match git check-attr -a --cached -- deep/a'test_expect_success 'check-attr with pathspec inside sparse definition' '    init_repos &amp;&amp;     "a -crlf myAttr" &gt;&gt;.gitattributes &amp;&amp;    run_on_all cp ../.gitattributes . &amp;&amp;    test_all_match git check-attr -a -- folder1/a &amp;&amp;    test_all_match git add folder1/.gitattributes &amp;&amp;    test_all_match git check-attr -a --cached -- folder1/a'</code></pre><p>In the context of the read_attr function, when direction is set to GIT_ATTR_INDEX, the attributes are fetched from the index. If the direction is GIT_ATTR_CHECKOUT, an attempt is made to read the attributes from the index first, and if unsuccessful, the function tries to retrieve them from the file. Similarly, if the direction is GIT_ATTR_CHECKIN, the attributes are initially attempted to be read from the file, and if this fails, the function tries to fetch them from the index.</p><p>The process of extracting attributes from the index is carried out by the read_attr_from_index function. It utilizes the path_in_cone_mode_sparse_checkout function to verify if the specified path falls within the sparse checkout scope. If it doesn’t, the function returns NULL. This sheds light on why the aforementioned test was successful; instead of searching for attributes in the index, we were traversing the working tree for the ‘.gitattributes’ file in all instances of this test.</p><p>My mentor, Victoria, identified a limitation in this code. She explained that if someone need to read the attributes of a file located within a sparse directory, it’s necessary to read attributes from any ‘.gitattributes’ files that might be present in that sparse directory. She suggested that I should read the blob OIDs from the tree entry of the sparse directory, citing the example of “builtin/grep.c: integrate with sparse index”.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week3-4</title>
      <link href="/2023/06/19/Week3-4/"/>
      <url>/2023/06/19/Week3-4/</url>
      
        <content type="html"><![CDATA[<h1 id="week3-4"><a href="#week3-4" class="headerlink" title="week3-4"></a>week3-4</h1><p>When I started studying git worktree, I went through a period of mental confusion. At first, I started studying the documentation to get familiar with the command, which differs significantly from other commands: it manages multiple working trees attached to the same repository. I spent a lot of time understanding this concept, and it was only after trying to use the command that I understood how it should be used. However, I was still puzzled by this concept. I wondered how it was related to the index, since it creates a new working tree each time. When I was confused, I thought I should seriously study the source code and look for places where it interacts with the index.</p><p>I eventually found two places related to the index:</p><ol><li><p>The ‘validate_no_submodules’ function, which checks if there are any submodules present in the worktree.</p></li><li><p>The ‘check_clean_worktree’ function, which verifies if a worktree is ‘clean’, i.e., there are no untracked or modified but uncommitted files. This is done by running the ‘git status’ command, and an error message is thrown if the worktree is not clean. Given that ‘git status’ is already sparse-aware, the function is also sparse-aware.</p></li></ol><p>So the next steps were quite similar to those with diff-tree, as we had evidence to show that we didn’t need to do any extra handling of the index. Finally, we didn’t see a significant improvement in performance testing, mainly because the time taken to read the index is minuscule compared to filesystem operations.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSoC week1-2</title>
      <link href="/2023/06/19/Week1-2/"/>
      <url>/2023/06/19/Week1-2/</url>
      
        <content type="html"><![CDATA[<h1 id="week1-2"><a href="#week1-2" class="headerlink" title="week1-2"></a>week1-2</h1><p>During the first week, I mainly dove into the documentation of git diff-tree, and also skimmed through the source code to help me write better tests. Diff-tree primarily has two commands related to the index: one is “Compares the content and mode of the blobs found via two tree objects”, and the other one compares commit objects. Therefore, I wrote tests around these two aspects. Super luckily, when I set the “requires-full-index” to false for “diff-tree”, all the tests passed. This indirectly proves that “diff-tree” might have successfully implemented sparse indexing. </p><p>But that’s not enough. We need to be certain that this sparse index integration is correct. We should verify that the intended usage associated with those two reads will still work with a sparse index.</p><p>So, I started digging into the source code, trying to find proof of lower-level functions already being sparse-aware, but I couldn’t find any. Thanks to the help of my mentor, who clarified a lot of concepts for me after I posted my first RFC patch, I came to understand the reasons for the successful integration:</p><ol><li><p>The first index read was added in fd66bcc31ff (diff-tree: read the index so attribute checks work in bare repositories, 2017-12-06) to deal with reading ‘.gitattributes’ content. 77efbb366ab (attr: be careful about sparse directories, 2021-09-08) established that, in a sparse index, we do <em>not</em> try to load a ‘.gitattributes’ file from within a sparse directory. </p></li><li><p>The second index access point is involved in rename detection, specifically when reading from stdin. This was initially added in f0c6b2a2fd9 ([PATCH] Optimize diff-tree -[CM]–stdin, 2005-05-27), where ‘setup’ was set to ‘DIFF_SETUP_USE_SIZE_CACHE |DIFF_SETUP_USE_CACHE’. That assignment was later modified to drop the ‘DIFF_SETUP_USE_CACHE’ in ff7fe37b053 (diff.c: move read_index() code back to the caller, 2018-08-13). However, ‘DIFF_SETUP_USE_SIZE_CACHE’ seems to be unused as of 6e0b8ed6d35 (diff.c: do not use a separate “size cache”., 2007-05-07) and nothing about ‘detect_rename’ otherwise indicates index usage.</p></li></ol><p>Therefore, we ensured that the integration is comprehensive and correct. Finally, in performance tests, everything was as expected, achieving a ~98% reduction in execution time.</p>]]></content>
      
      
      <categories>
          
          <category> GSoC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATHEMATICAL INDUCTION</title>
      <link href="/2022/09/17/New%20Document/"/>
      <url>/2022/09/17/New%20Document/</url>
      
        <content type="html"><![CDATA[<p>#How Does Induction Work</p><p>T is a theorem with a parameter n ≥ 1.</p><p>• If we show that:</p><ol><li>T holds for n = 1 (or a small number d, if n ≥ d)</li><li>For every n ≥ 1</li></ol><p>If T holds for n<br>then T holds for n + 1</p><p>• Then theorem T holds for all n ≥ 1. The assumption that T holds for n is called induction hypothesis</p><p>#Strong Induction</p><p>A statement T with a parameter n is true for n = 1 and<br>if, for every n ≥ 1 the following holds:</p><p>T being true for every natural number m ≤ n implies that T is true for n + 1, then T is true for all natural numbers</p><p>Also, power(2) induction: induction on natural numbers that are integer powers of 2 Multiple induction: base case for one parameter required another induction on another parameter.</p>]]></content>
      
      
      <categories>
          
          <category> ANALYSIS OF ALGORITHMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BINARY SEARCH AND VARIATIONS</title>
      <link href="/2022/02/11/red-black-tree/"/>
      <url>/2022/02/11/red-black-tree/</url>
      
        <content type="html"><![CDATA[<p>#Binary Search and Variations</p><ul><li>Idea: cut search space in half (about half) by asking only one question.</li><li>Also work when, with constant time, cut search space from n to n<br>a, where a &gt; 1.</li><li>Used often in computer science.</li><li>Pure binary search</li></ul><p>x1, x2, . . . , xn is a sequence of real numbers such that<br>x1 ≤ x2 ≤ · · · ≤ xn<br>Problem: Given a real number z, we want to find whether z appears in the sequence, and<br>if it does, to find an index i such that xi = z.<br>Solution: binary search!</p><p>Binary search:<br>Question: “Is xn/2 &lt; z?”<br>Yes: binary search range becomes xn/2+1, . . . xn<br>No: binary search range becomes x1, . . . , xn/2<br>Complexity: O(log2 n).</p><p>#A More General Version<br>Input: a sorted sequence, x1 ≤ x2 ≤ . . . ≤ xn, and a target value z<br>Output: the largest index i, s.t. xi ≤ z, if there is no such i then return 0;</p><ol><li>If x1 &gt; z, return 0;</li><li>If xn ≤ z, return n;</li><li>l = 1; r = n; (xl ≤ z &lt; xr)</li><li>if l = r − 1 return l;</li><li>Set m to b<br>l+r/2，the greatest integer less than or equal to l+r/2<br>which is the middle between l and r</li><li>if xm &gt; z, then r = m; goto step 4;</li><li>if xm ≤ z, then l = m; goto step 4;</li></ol><p>#Binary Search in a Cyclic Sequence<br>Definition. A sequence x1, x2, . . . , xn is said to be cyclically sorted if the smallest<br>number in the sequence is xi<br>for some unknown i, and the sequence<br>xi<br>, xi+1, . . . , xn, x1, x2, . . . , xi−1<br>is sorted.<br>The Problem: Given a cyclically sorted list, find the position of the minimum element in<br>the list (we assume elements are distinct).</p><p>Solution: For any two numbers xk, xm, such that k &lt; m, compare xk with xm.</p><ol><li>If xk &lt; xm then i cannot be in the range k &lt; j ≤ m (k is possible)</li><li>If xk &gt; xm then i must be in the range k &lt; j ≤ m</li></ol><p>Is xn/2 &lt; xn?<br>Yes: search range 1 . . . n/2. No: search range n/2 + 1, . . . n.<br>Find the index of the smallest element in O(logn) time</p>]]></content>
      
      
      <categories>
          
          <category> ANALYSIS OF ALGORITHMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
